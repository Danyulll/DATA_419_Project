install.packages("shiny.router")
shiny.fluent::runExample("dashboard")
runApp('app3.R')
library(shiny); runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
knitr::opts_chunk$set(echo = TRUE)
library(klaR)
library(mvtnorm)
set.seed(231354)
sigma1 <- matrix(c(1, 0, 0, 1), 2, 2, byrow = TRUE)
mu1 <- c(0, 0)
mu2 <- c(0, 2)
# Generate 2D MVN data from 1 group so one MVN
group1 <- data.frame(rmvnorm(100, mean = mu1, sigma = sigma1))
# Generate more 2D MVN from a different dist, that's group 2.
group2 <- data.frame(rmvnorm(100, mean = mu2, sigma = sigma1))
groups <- c(rep("G1", 100), rep("G2", 100))
dgp <-
data.frame(
"G" = groups,
"X1" = c(group1$X1, group2$X1),
"X2" = c(group1$X2, group2$X2)
)
# Now I can plot the underlying densities that generated them (this is not the same thing as plotting the points). Make the densities see through
x <- seq(-5, 5, length.out = 100)
y <- seq(-5, 5, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- colnames(xdat)[-1]
# Calculate the probability density for each point on the grid for both Gaussians
pdf_values1 <- dmvnorm(grid, mean = mu1, sigma = sigma1)
pdf_values2 <- dmvnorm(grid, mean = mu2, sigma = sigma1)
# Reshape the density values to match the grid
density1 <- matrix(pdf_values1, nrow = length(x))
density2 <- matrix(pdf_values2, nrow = length(x))
lda.out <- lda(G~.,dgp)
prd = as.numeric(predict(lda.out, newdata = grid)$class)
plot1 <-
plot_ly(
x = x,
y = y,
z = density1,
type = "surface",
colors = "viridis",
opacity = 0.7
)|> add_surface(
x = x,
y = y,
z = density3,
colors = "viridis",
opacity = 0.7
) |> add_markers(
data = dgp,
x = dgp$X1,
y = dgp$X2,
z = 0,
opacity=1,
color = ~dgp$G
) |> add_markers(
x = grid$X1,
y = grid$X2,
z = 0,
color=~prd,
opacity=0.01
)
library(klaR)
library(mvtnorm)
set.seed(231354)
sigma1 <- matrix(c(1, 0, 0, 1), 2, 2, byrow = TRUE)
mu1 <- c(0, 0)
mu2 <- c(0, 2)
# Generate 2D MVN data from 1 group so one MVN
group1 <- data.frame(rmvnorm(100, mean = mu1, sigma = sigma1))
# Generate more 2D MVN from a different dist, that's group 2.
group2 <- data.frame(rmvnorm(100, mean = mu2, sigma = sigma1))
groups <- c(rep("G1", 100), rep("G2", 100))
dgp <-
data.frame(
"G" = groups,
"X1" = c(group1$X1, group2$X1),
"X2" = c(group1$X2, group2$X2)
)
# Now I can plot the underlying densities that generated them (this is not the same thing as plotting the points). Make the densities see through
x <- seq(-5, 5, length.out = 100)
y <- seq(-5, 5, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- colnames(xdat)[-1]
# Calculate the probability density for each point on the grid for both Gaussians
pdf_values1 <- dmvnorm(grid, mean = mu1, sigma = sigma1)
pdf_values2 <- dmvnorm(grid, mean = mu2, sigma = sigma1)
# Reshape the density values to match the grid
density1 <- matrix(pdf_values1, nrow = length(x))
density2 <- matrix(pdf_values2, nrow = length(x))
lda.out <- lda(G~.,dgp)
prd = as.numeric(predict(lda.out, newdata = grid)$class)
plot1 <-
plot_ly(
x = x,
y = y,
z = density1,
type = "surface",
colors = "viridis",
opacity = 0.7
)|> add_surface(
x = x,
y = y,
z = density3,
colors = "viridis",
opacity = 0.7
) |> add_markers(
data = dgp,
x = dgp$X1,
y = dgp$X2,
z = 0,
opacity=1,
color = ~dgp$G
) |> add_markers(
x = grid$X1,
y = grid$X2,
z = 0,
color=~prd,
opacity=0.01
)
library(klaR)
library(mvtnorm)
set.seed(231354)
sigma1 <- matrix(c(1, 0, 0, 1), 2, 2, byrow = TRUE)
mu1 <- c(0, 0)
mu2 <- c(0, 2)
# Generate 2D MVN data from 1 group so one MVN
group1 <- data.frame(rmvnorm(100, mean = mu1, sigma = sigma1))
# Generate more 2D MVN from a different dist, that's group 2.
group2 <- data.frame(rmvnorm(100, mean = mu2, sigma = sigma1))
groups <- c(rep("G1", 100), rep("G2", 100))
dgp <-
data.frame(
"G" = groups,
"X1" = c(group1$X1, group2$X1),
"X2" = c(group1$X2, group2$X2)
)
# Now I can plot the underlying densities that generated them (this is not the same thing as plotting the points). Make the densities see through
x <- seq(-5, 5, length.out = 100)
y <- seq(-5, 5, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- colnames(xdat)[-1]
# Calculate the probability density for each point on the grid for both Gaussians
pdf_values1 <- dmvnorm(grid, mean = mu1, sigma = sigma1)
pdf_values2 <- dmvnorm(grid, mean = mu2, sigma = sigma1)
# Reshape the density values to match the grid
density1 <- matrix(pdf_values1, nrow = length(x))
density2 <- matrix(pdf_values2, nrow = length(x))
lda.out <- lda(G~.,dgp)
prd = as.numeric(predict(lda.out, newdata = grid)$class)
plot1 <-
plot_ly(
x = x,
y = y,
z = density1,
type = "surface",
colors = "viridis",
opacity = 0.7
)|> add_surface(
x = x,
y = y,
z = density3,
colors = "viridis",
opacity = 0.7
)
library(klaR)
library(mvtnorm)
set.seed(231354)
sigma1 <- matrix(c(1, 0, 0, 1), 2, 2, byrow = TRUE)
mu1 <- c(0, 0)
mu2 <- c(0, 2)
# Generate 2D MVN data from 1 group so one MVN
group1 <- data.frame(rmvnorm(100, mean = mu1, sigma = sigma1))
# Generate more 2D MVN from a different dist, that's group 2.
group2 <- data.frame(rmvnorm(100, mean = mu2, sigma = sigma1))
groups <- c(rep("G1", 100), rep("G2", 100))
dgp <-
data.frame(
"G" = groups,
"X1" = c(group1$X1, group2$X1),
"X2" = c(group1$X2, group2$X2)
)
# Now I can plot the underlying densities that generated them (this is not the same thing as plotting the points). Make the densities see through
x <- seq(-5, 5, length.out = 100)
y <- seq(-5, 5, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- colnames(xdat)[-1]
# Calculate the probability density for each point on the grid for both Gaussians
pdf_values1 <- dmvnorm(grid, mean = mu1, sigma = sigma1)
pdf_values2 <- dmvnorm(grid, mean = mu2, sigma = sigma1)
# Reshape the density values to match the grid
density1 <- matrix(pdf_values1, nrow = length(x))
density2 <- matrix(pdf_values2, nrow = length(x))
lda.out <- lda(G~.,dgp)
prd = as.numeric(predict(lda.out, newdata = grid)$class)
plot1 <-
plot_ly(
x = x,
y = y,
z = density1,
type = "surface",
colors = "viridis",
opacity = 0.7
)|> add_surface(
x = x,
y = y,
z = density1,
colors = "viridis",
opacity = 0.7
)
plot1
library(klaR)
library(mvtnorm)
set.seed(231354)
sigma1 <- matrix(c(1, 0, 0, 1), 2, 2, byrow = TRUE)
mu1 <- c(0, 0)
mu2 <- c(0, 2)
# Generate 2D MVN data from 1 group so one MVN
group1 <- data.frame(rmvnorm(100, mean = mu1, sigma = sigma1))
# Generate more 2D MVN from a different dist, that's group 2.
group2 <- data.frame(rmvnorm(100, mean = mu2, sigma = sigma1))
groups <- c(rep("G1", 100), rep("G2", 100))
dgp <-
data.frame(
"G" = groups,
"X1" = c(group1$X1, group2$X1),
"X2" = c(group1$X2, group2$X2)
)
# Now I can plot the underlying densities that generated them (this is not the same thing as plotting the points). Make the densities see through
x <- seq(-5, 5, length.out = 100)
y <- seq(-5, 5, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- colnames(xdat)[-1]
# Calculate the probability density for each point on the grid for both Gaussians
pdf_values1 <- dmvnorm(grid, mean = mu1, sigma = sigma1)
pdf_values2 <- dmvnorm(grid, mean = mu2, sigma = sigma1)
# Reshape the density values to match the grid
density1 <- matrix(pdf_values1, nrow = length(x))
density2 <- matrix(pdf_values2, nrow = length(x))
lda.out <- lda(G~.,dgp)
prd = as.numeric(predict(lda.out, newdata = grid)$class)
plot1 <-
plot_ly(
x = x,
y = y,
z = density1,
type = "surface",
colors = "viridis",
opacity = 0.7
)
plot1
library(klaR)
library(mvtnorm)
set.seed(231354)
sigma1 <- matrix(c(1, 0, 0, 1), 2, 2, byrow = TRUE)
mu1 <- c(0, 0)
mu2 <- c(0, 2)
# Generate 2D MVN data from 1 group so one MVN
group1 <- data.frame(rmvnorm(100, mean = mu1, sigma = sigma1))
# Generate more 2D MVN from a different dist, that's group 2.
group2 <- data.frame(rmvnorm(100, mean = mu2, sigma = sigma1))
groups <- c(rep("G1", 100), rep("G2", 100))
dgp <-
data.frame(
"G" = groups,
"X1" = c(group1$X1, group2$X1),
"X2" = c(group1$X2, group2$X2)
)
# Now I can plot the underlying densities that generated them (this is not the same thing as plotting the points). Make the densities see through
x <- seq(-5, 5, length.out = 100)
y <- seq(-5, 5, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- colnames(xdat)[-1]
# Calculate the probability density for each point on the grid for both Gaussians
pdf_values1 <- dmvnorm(grid, mean = mu1, sigma = sigma1)
pdf_values2 <- dmvnorm(grid, mean = mu2, sigma = sigma1)
# Reshape the density values to match the grid
density1 <- matrix(pdf_values1, nrow = length(x))
density2 <- matrix(pdf_values2, nrow = length(x))
lda.out <- lda(G~.,dgp)
prd = as.numeric(predict(lda.out, newdata = grid)$class)
plot1 <-
plot_ly(
x = x,
y = y,
z = density1,
type = "surface",
colors = "viridis",
opacity = 0.7
) |> layout(showLegend = F, legend = list())
plot1
library(klaR)
library(mvtnorm)
set.seed(231354)
sigma1 <- matrix(c(1, 0, 0, 1), 2, 2, byrow = TRUE)
mu1 <- c(0, 0)
mu2 <- c(0, 2)
# Generate 2D MVN data from 1 group so one MVN
group1 <- data.frame(rmvnorm(100, mean = mu1, sigma = sigma1))
# Generate more 2D MVN from a different dist, that's group 2.
group2 <- data.frame(rmvnorm(100, mean = mu2, sigma = sigma1))
groups <- c(rep("G1", 100), rep("G2", 100))
dgp <-
data.frame(
"G" = groups,
"X1" = c(group1$X1, group2$X1),
"X2" = c(group1$X2, group2$X2)
)
# Now I can plot the underlying densities that generated them (this is not the same thing as plotting the points). Make the densities see through
x <- seq(-5, 5, length.out = 100)
y <- seq(-5, 5, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- colnames(xdat)[-1]
# Calculate the probability density for each point on the grid for both Gaussians
pdf_values1 <- dmvnorm(grid, mean = mu1, sigma = sigma1)
pdf_values2 <- dmvnorm(grid, mean = mu2, sigma = sigma1)
# Reshape the density values to match the grid
density1 <- matrix(pdf_values1, nrow = length(x))
density2 <- matrix(pdf_values2, nrow = length(x))
lda.out <- lda(G~.,dgp)
prd = as.numeric(predict(lda.out, newdata = grid)$class)
plot1 <-
plot_ly(
x = x,
y = y,
z = density1,
type = "surface",
colors = "viridis",
opacity = 0.7
) %>% layout(showlegend = FALSE)
plot1
library(plyr)
library(plotly)
library(tidyr)
library(plyr)
library(klaR)
library(mvtnorm)
set.seed(231354)
sigma1 <- matrix(c(1, 0, 0, 1), 2, 2, byrow = TRUE)
mu1 <- c(0, 0)
mu2 <- c(0, 2)
# Generate 2D MVN data from 1 group so one MVN
group1 <- data.frame(rmvnorm(100, mean = mu1, sigma = sigma1))
# Generate more 2D MVN from a different dist, that's group 2.
group2 <- data.frame(rmvnorm(100, mean = mu2, sigma = sigma1))
groups <- c(rep("G1", 100), rep("G2", 100))
dgp <-
data.frame(
"G" = groups,
"X1" = c(group1$X1, group2$X1),
"X2" = c(group1$X2, group2$X2)
)
# Now I can plot the underlying densities that generated them (this is not the same thing as plotting the points). Make the densities see through
x <- seq(-5, 5, length.out = 100)
y <- seq(-5, 5, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- colnames(xdat)[-1]
# Calculate the probability density for each point on the grid for both Gaussians
pdf_values1 <- dmvnorm(grid, mean = mu1, sigma = sigma1)
pdf_values2 <- dmvnorm(grid, mean = mu2, sigma = sigma1)
# Reshape the density values to match the grid
density1 <- matrix(pdf_values1, nrow = length(x))
density2 <- matrix(pdf_values2, nrow = length(x))
lda.out <- lda(G~.,dgp)
prd = as.numeric(predict(lda.out, newdata = grid)$class)
plot1 <-
plot_ly(
x = x,
y = y,
z = density1,
type = "surface",
colors = "viridis",
opacity = 0.7
) %>% layout(showlegend = FALSE)
plot1
library(plotly)
library(tidyr)
library(plyr)
library(klaR)
library(mvtnorm)
set.seed(231354)
sigma1 <- matrix(c(1, 0, 0, 1), 2, 2, byrow = TRUE)
mu1 <- c(0, 0)
mu2 <- c(0, 2)
# Generate 2D MVN data from 1 group so one MVN
group1 <- data.frame(rmvnorm(100, mean = mu1, sigma = sigma1))
# Generate more 2D MVN from a different dist, that's group 2.
group2 <- data.frame(rmvnorm(100, mean = mu2, sigma = sigma1))
groups <- c(rep("G1", 100), rep("G2", 100))
dgp <-
data.frame(
"G" = groups,
"X1" = c(group1$X1, group2$X1),
"X2" = c(group1$X2, group2$X2)
)
# Now I can plot the underlying densities that generated them (this is not the same thing as plotting the points). Make the densities see through
x <- seq(-5, 5, length.out = 100)
y <- seq(-5, 5, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- colnames(xdat)[-1]
# Calculate the probability density for each point on the grid for both Gaussians
pdf_values1 <- dmvnorm(grid, mean = mu1, sigma = sigma1)
pdf_values2 <- dmvnorm(grid, mean = mu2, sigma = sigma1)
# Reshape the density values to match the grid
density1 <- matrix(pdf_values1, nrow = length(x))
density2 <- matrix(pdf_values2, nrow = length(x))
lda.out <- lda(G~.,dgp)
prd = as.numeric(predict(lda.out, newdata = grid)$class)
plot1 <-
plot_ly(
x = x,
y = y,
z = density1,
type = "surface",
colors = "viridis",
opacity = 0.7
) %>% layout(showlegend = FALSE)
hide_legend(plot1 )
plot1
library(plotly)
library(tidyr)
library(plyr)
library(klaR)
library(mvtnorm)
set.seed(231354)
sigma1 <- matrix(c(1, 0, 0, 1), 2, 2, byrow = TRUE)
mu1 <- c(0, 0)
mu2 <- c(0, 2)
# Generate 2D MVN data from 1 group so one MVN
group1 <- data.frame(rmvnorm(100, mean = mu1, sigma = sigma1))
# Generate more 2D MVN from a different dist, that's group 2.
group2 <- data.frame(rmvnorm(100, mean = mu2, sigma = sigma1))
groups <- c(rep("G1", 100), rep("G2", 100))
dgp <-
data.frame(
"G" = groups,
"X1" = c(group1$X1, group2$X1),
"X2" = c(group1$X2, group2$X2)
)
# Now I can plot the underlying densities that generated them (this is not the same thing as plotting the points). Make the densities see through
x <- seq(-5, 5, length.out = 100)
y <- seq(-5, 5, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- colnames(xdat)[-1]
# Calculate the probability density for each point on the grid for both Gaussians
pdf_values1 <- dmvnorm(grid, mean = mu1, sigma = sigma1)
pdf_values2 <- dmvnorm(grid, mean = mu2, sigma = sigma1)
# Reshape the density values to match the grid
density1 <- matrix(pdf_values1, nrow = length(x))
density2 <- matrix(pdf_values2, nrow = length(x))
lda.out <- lda(G~.,dgp)
prd = as.numeric(predict(lda.out, newdata = grid)$class)
plot1 <-
plot_ly(
x = x,
y = y,
z = density1,
type = "surface",
colors = "viridis",
opacity = 0.7
)
hide_legend(plot1 )
?hide_legend
runApp('app3.R')
getwd()
setwd("C:\Users\danie\Desktop\2023 W1\DATA 419C\Project\DATA_419_Project\rhino_attempt")
setwd("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\rhino_attempt")
library(rhino)
install.packages("rhino")
rhino::init("RhinoApplication")
setwd("./RhinoApplication")
shiny::runApp()
#' @export
server <- function(id) {
moduleServer(id, function(input, output, session) {
chart$server("chart")
})
}
shiny::runApp()
install.packages("shinydashboard")
library(shinydashboard)
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
install.packages("semantic.dashboard")
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
?dashboardPage
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
library(shinydashboard)
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
?dashboardPage
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
runApp('C:/Users/danie/Desktop/2023 W1/DATA 419C/Project/DATA_419_Project/app3.R')
