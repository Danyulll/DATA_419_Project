scores$diagnosis <- bc$diagnosis
rda_out.nmf <- rda(diagnosis~.,df)
# NMF preds
nmf.out <- nmf(bc[,-1],2)
scores <- as.data.frame(nmf.out$w)
scores$diagnosis <- bc$diagnosis
rda_out.nmf <- rda(diagnosis~.,df)
x <- seq(-1850, 500, length.out = 100)
y <- seq(-23, 15, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- c("V1", "V2")
# Get grid predictions
prd = as.numeric(predict(rda_out.nmf, newdata = grid)$class)
scores
# NMF preds
nmf.out <- nmf(bc[,-1],2)
scores <- as.data.frame(nmf.out$w)
scores$diagnosis <- bc$diagnosis
rda_out.nmf <- rda(diagnosis~.,df)
x <- seq(-1850, 500, length.out = 100)
y <- seq(-23, 15, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- c("V1", "V2")
# Get grid predictions
prd = as.numeric(predict(rda_out.nmf, newdata = grid)$class)
plot1 <-
plot_ly()|> add_markers(
data = scores,
x = scores$V1,
y = scores$V2,
z = 0,
opacity = 1,
color = ~ bc$diagnosis,
marker = list(size = 4),
colors = "viridis",
showlegend = FALSE
) |> add_markers(
x = grid$V1,
y = grid$V1,
z = 0,
color = ~prd,
opacity=0.03,
showlegend = FALSE
)
library(ploty)
library(plotly)
# NMF preds
nmf.out <- nmf(bc[,-1],2)
scores <- as.data.frame(nmf.out$w)
scores$diagnosis <- bc$diagnosis
rda_out.nmf <- rda(diagnosis~.,df)
x <- seq(-1850, 500, length.out = 100)
y <- seq(-23, 15, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- c("V1", "V2")
# Get grid predictions
prd = as.numeric(predict(rda_out.nmf, newdata = grid)$class)
plot1 <-
plot_ly()|> add_markers(
data = scores,
x = scores$V1,
y = scores$V2,
z = 0,
opacity = 1,
color = ~ bc$diagnosis,
marker = list(size = 4),
colors = "viridis",
showlegend = FALSE
) |> add_markers(
x = grid$V1,
y = grid$V2,
z = 0,
color = ~prd,
opacity=0.03,
showlegend = FALSE
)
plot1
scores <- as.data.frame(nmf.out$w)
df <- cbind(scores,bc$diagnosis)
colnames(df)[3] <- "diagnosis"
rda(diagnosis~.,df)
library(plotly)
# NMF preds
nmf.out <- nmf(bc[,-1],2)
scores <- as.data.frame(nmf.out$w)
scores$diagnosis <- bc$diagnosis
rda_out.nmf <- rda(diagnosis~.,df)
x <- seq(-1850, 500, length.out = 100)
y <- seq(-23, 15, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- c("V1", "V2")
# Get grid predictions
prd = as.numeric(predict(rda_out.nmf, newdata = grid)$class)
plot1 <-
plot_ly()|> add_markers(
data = scores,
x = scores$V1,
y = scores$V2,
z = 0,
opacity = 1,
color = ~ bc$diagnosis,
marker = list(size = 4),
colors = "viridis",
showlegend = FALSE
) |> add_markers(
x = grid$V1,
y = grid$V2,
z = 0,
color = ~prd,
opacity=0.03,
showlegend = FALSE
)
plot1
scores <- as.data.frame(nmf.out$w)
df <- cbind(scores,bc$diagnosis)
colnames(df)[3] <- "diagnosis"
rda(diagnosis~.,df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(klaR)
library(MLmetrics)
bc <- read.csv("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\breast-cancer.csv")
library(tidyverse)
library(klaR)
library(MLmetrics)
bc <- read.csv("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\breast-cancer.csv")
bc <- na.omit(bc)
bc <- bc[,-1]
bc$diagnosis <- factor(bc$diagnosis)
bc
as.data.frame(summary(bc))
# plot(bc[,2:11])
library(GGally)
library(ggplot2)
# ggpairs(bc[,2:11])
data <- bc[,1:11]
ggpairs(data, columns = 1:11, aes(color = diagnosis, alpha = 0.5),
upper = list(continuous = wrap("cor", size = 2.5)))
bc <- bc[,1:11]
rda_out <- rda(diagnosis~.,bc)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(bc$diagnosis)
ConfusionMatrix(predict(rda_out)$class, bc$diagnosis)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
res
pca.out <- prcomp(bc[,-1])
cum_prop_var <- summary(pca.out)$importance[3,2]
loadi <- round(pca.out$rotation[,1:2],4)
loadi
library(klaR)
scores <- as.data.frame(pca.out$x)[,1:2]
df <- cbind(scores,bc$diagnosis)
colnames(df)[3] <- "diagnosis"
rda_out.pca <- rda(diagnosis~.,df)
rda_out.pca
library(plotly)
# Set up grid
x <- seq(-1850, 500, length.out = 100)
y <- seq(-23, 15, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- c("PC1", "PC2")
# Get grid predictions
prd = as.numeric(predict(rda_out.pca, newdata = grid)$class)
# PCA preds
scores <- as.data.frame(pca.out$x)[,1:2]
df <- cbind(scores,bc$diagnosis)
colnames(df)[3] <- "diagnosis"
rda_out.pca <- rda(diagnosis~.,df)
plot1 <-
plot_ly()|> add_markers(
data = scores,
x = scores$PC1,
y = scores$PC2,
z = 0,
opacity = 1,
color = ~ bc$diagnosis,
marker = list(size = 4),
colors = "viridis",
showlegend = FALSE
) |> add_markers(
x = grid$PC1,
y = grid$PC2,
z = 0,
color = ~prd,
opacity=0.03,
showlegend = FALSE
)
plot1
loadi <- round(pca.out$rotation[,1:2],4)
# loadi[abs(loadi)<0.001] <- NA
loadi
scores <- as.data.frame(pca.out$x)[,1:2]
df <- cbind(scores,bc$diagnosis)
colnames(df)[3] <- "diagnosis"
rda(diagnosis~.,df)
#x: the non-negative data (if any negatives exist, the whole data is shifted)
#q: the number of factors/bases
#eps: convergence criteria (lack of progress on sum squared error)
#maxit: convergence criteria (max iteration when lack of progress not met)
#w: n by q scores on factors
#h: q by p observed factors/bases
#By default (when w, h NULL) both w and h are initialized randomly
nmf <- function(x, q, eps=0.001, maxit=2000, w=NULL, h=NULL){
n <- nrow(x)
p <- ncol(x)
if(any(x<0)){x <- as.matrix(x)+abs(min(x))}
else{x <- as.matrix(x)}
if(is.null(w)){
w <- matrix(runif(n*q, min(x), max(x)), n, q)
}
if(is.null(h)){
h <- matrix(runif(p*q, min(x), max(x)), q, p)
}
ed <- sum((x-w%*%h)^2)
conv <- FALSE
ctr <- 1
while(!conv){
ctr <- ctr+1
h <- h * (t(w) %*% x) / (t(w) %*% w %*% h)
w <- w * (x %*% t(h)) / (w %*% h %*% t(h))
wh <- w%*%h
ed[ctr] <- sum((x-wh)^2)
if((ed[ctr-1]-ed[ctr] < eps)|(ctr==maxit)){
conv <- TRUE
}
}
list(ed=ed, w=w, h=h, x=x)
}
library(plotly)
# NMF preds
nmf.out <- nmf(bc[,-1],2)
scores <- as.data.frame(nmf.out$w)
scores$diagnosis <- bc$diagnosis
rda_out.nmf <- rda(diagnosis~.,df)
x <- seq(-1850, 500, length.out = 100)
y <- seq(-23, 15, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- c("V1", "V2")
# Get grid predictions
prd = as.numeric(predict(rda_out.nmf, newdata = grid)$class)
# NMF preds
nmf.out <- nmf(bc[,-1],2)
# NMF preds
nmf.out <- nmf(bc[,-1],2)
scores <- as.data.frame(nmf.out$w)
scores$diagnosis <- bc$diagnosis
rda_out.nmf <- rda(diagnosis~.,df)
x <- seq(-1850, 500, length.out = 100)
y <- seq(-23, 15, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- c("V1", "V2")
# Get grid predictions
prd = as.numeric(predict(rda_out.nmf, newdata = grid)$class)
grid
predict(rda_out.nmf, newdata = grid)
#x: the non-negative data (if any negatives exist, the whole data is shifted)
#q: the number of factors/bases
#eps: convergence criteria (lack of progress on sum squared error)
#maxit: convergence criteria (max iteration when lack of progress not met)
#w: n by q scores on factors
#h: q by p observed factors/bases
#By default (when w, h NULL) both w and h are initialized randomly
nmf <- function(x, q, eps=0.001, maxit=2000, w=NULL, h=NULL){
n <- nrow(x)
p <- ncol(x)
if(any(x<0)){x <- as.matrix(x)+abs(min(x))}
else{x <- as.matrix(x)}
if(is.null(w)){
w <- matrix(runif(n*q, min(x), max(x)), n, q)
}
if(is.null(h)){
h <- matrix(runif(p*q, min(x), max(x)), q, p)
}
ed <- sum((x-w%*%h)^2)
conv <- FALSE
ctr <- 1
while(!conv){
ctr <- ctr+1
h <- h * (t(w) %*% x) / (t(w) %*% w %*% h)
w <- w * (x %*% t(h)) / (w %*% h %*% t(h))
wh <- w%*%h
ed[ctr] <- sum((x-wh)^2)
if((ed[ctr-1]-ed[ctr] < eps)|(ctr==maxit)){
conv <- TRUE
}
}
list(ed=ed, w=w, h=h, x=x)
}
# NMF preds
nmf.out <- nmf(bc[,-1],2)
scores$diagnosis <- bc$diagnosis
rda_out.nmf <- rda(diagnosis~.,df)
rda_out.nmf
x <- seq(-1850, 500, length.out = 100)
y <- seq(-23, 15, length.out = 100)
grid <- expand.grid(x = x, y = y)
grid
colnames(grid) <- c("V1", "V2")
# Get grid predictions
prd = as.numeric(predict(rda_out.nmf, newdata = grid)$class)
colnames(grid) <- c("PC1", "PC2")
# Get grid predictions
prd = as.numeric(predict(rda_out.nmf, newdata = grid)$class)
# NMF preds
nmf.out <- nmf(bc[,-1],2)
nmf.out$w
nmf.out$w
scores <- as.data.frame(nmf.out$w)
scores
scores$diagnosis <- bc$diagnosis
scores
rda_out.nmf <- rda(diagnosis~.,df)
x <- seq(-1850, 500, length.out = 100)
y <- seq(-23, 15, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- c("V1", "V2")
grid
library(plotly)
# NMF preds
nmf.out <- nmf(bc[,-1],2)
scores <- as.data.frame(nmf.out$w)
scores$diagnosis <- bc$diagnosis
t <- rda(diagnosis~.,df)
x <- seq(-1850, 500, length.out = 100)
y <- seq(-23, 15, length.out = 100)
grid <- expand.grid(x = x, y = y)
colnames(grid) <- c("V1", "V2")
# Get grid predictions
prd = as.numeric(predict(t, newdata = grid)$class)
library(plotly)
# NMF preds
nmf.out <- nmf(bc[,-1],2)
scores <- as.data.frame(nmf.out$w)
scores$diagnosis <- bc$diagnosis
t <- rda(diagnosis~.,df)
x <- seq(-1850, 500, length.out = 100)
y <- seq(-23, 15, length.out = 100)
grid2 <- expand.grid(x = x, y = y)
colnames(grid2) <- c("V1", "V2")
# Get grid predictions
prd = as.numeric(predict(t, newdata = grid2)$class)
library(tidyverse)
library(klaR)
library(MLmetrics)
bc <- read.csv("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\breast-cancer.csv")
bc <- na.omit(bc)
bc <- bc[,-1]
bc$diagnosis <- factor(bc$diagnosis)
bc
as.data.frame(summary(bc))
bc <- bc[,1:11]
rda_out <- rda(diagnosis~.,bc)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(bc$diagnosis)
ConfusionMatrix(predict(rda_out)$class, bc$diagnosis)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
res
#x: the non-negative data (if any negatives exist, the whole data is shifted)
#q: the number of factors/bases
#eps: convergence criteria (lack of progress on sum squared error)
#maxit: convergence criteria (max iteration when lack of progress not met)
#w: n by q scores on factors
#h: q by p observed factors/bases
#By default (when w, h NULL) both w and h are initialized randomly
nmf <- function(x, q, eps=0.001, maxit=2000, w=NULL, h=NULL){
n <- nrow(x)
p <- ncol(x)
if(any(x<0)){x <- as.matrix(x)+abs(min(x))}
else{x <- as.matrix(x)}
if(is.null(w)){
w <- matrix(runif(n*q, min(x), max(x)), n, q)
}
if(is.null(h)){
h <- matrix(runif(p*q, min(x), max(x)), q, p)
}
ed <- sum((x-w%*%h)^2)
conv <- FALSE
ctr <- 1
while(!conv){
ctr <- ctr+1
h <- h * (t(w) %*% x) / (t(w) %*% w %*% h)
w <- w * (x %*% t(h)) / (w %*% h %*% t(h))
wh <- w%*%h
ed[ctr] <- sum((x-wh)^2)
if((ed[ctr-1]-ed[ctr] < eps)|(ctr==maxit)){
conv <- TRUE
}
}
list(ed=ed, w=w, h=h, x=x)
}
library(plotly)
# NMF preds
nmf.out <- nmf(bc[,-1],2)
scores <- as.data.frame(nmf.out$w)
scores$diagnosis <- bc$diagnosis
t <- rda(diagnosis~.,df)
library(plotly)
# NMF preds
nmf.out <- nmf(bc[,-1],2)
scores <- as.data.frame(nmf.out$w)
scores$diagnosis <- bc$diagnosis
rda_out.nmf <- rda(diagnosis~.,scores)
x <- seq(-1850, 500, length.out = 100)
y <- seq(-23, 15, length.out = 100)
grid2 <- expand.grid(x = x, y = y)
colnames(grid2) <- c("V1", "V2")
# Get grid predictions
prd = as.numeric(predict(rda_out.nmf, newdata = grid2)$class)
#     plot1 <-
#       plot_ly()|> add_markers(
#         data = scores,
#         x = scores$V1,
#         y = scores$V2,
#         z = 0,
#         opacity = 1,
#         color = ~ bc$diagnosis,
#         marker = list(size = 4),
#         colors = "viridis",
#         showlegend = FALSE
#       ) |> add_markers(
#         x = grid2$V1,
#         y = grid2$V2,
#         z = 0,
#         color = ~prd,
#         opacity=0.03,
#         showlegend = FALSE
#       )
#
# plot1
library(plotly)
# NMF preds
nmf.out <- nmf(bc[,-1],2)
scores <- as.data.frame(nmf.out$w)
scores$diagnosis <- bc$diagnosis
rda_out.nmf <- rda(diagnosis~.,scores)
x <- seq(-1850, 500, length.out = 100)
y <- seq(-23, 15, length.out = 100)
grid2 <- expand.grid(x = x, y = y)
colnames(grid2) <- c("V1", "V2")
# Get grid predictions
prd = as.numeric(predict(rda_out.nmf, newdata = grid2)$class)
plot1 <-
plot_ly()|> add_markers(
data = scores,
x = scores$V1,
y = scores$V2,
z = 0,
opacity = 1,
color = ~ bc$diagnosis,
marker = list(size = 4),
colors = "viridis",
showlegend = FALSE
) |> add_markers(
x = grid2$V1,
y = grid2$V2,
z = 0,
color = ~prd,
opacity=0.03,
showlegend = FALSE
)
plot1
prd
plot1
library(plotly)
# NMF preds
nmf.out <- nmf(bc[,-1],2)
scores <- as.data.frame(nmf.out$w)
scores$diagnosis <- bc$diagnosis
rda_out.nmf <- rda(diagnosis~.,scores)
x <- seq(0, 8000, length.out = 100)
y <- seq(0, 7000, length.out = 100)
grid2 <- expand.grid(x = x, y = y)
colnames(grid2) <- c("V1", "V2")
# Get grid predictions
prd = as.numeric(predict(rda_out.nmf, newdata = grid2)$class)
plot1 <-
plot_ly()|> add_markers(
data = scores,
x = scores$V1,
y = scores$V2,
z = 0,
opacity = 1,
color = ~ bc$diagnosis,
marker = list(size = 4),
colors = "viridis",
showlegend = FALSE
) |> add_markers(
x = grid2$V1,
y = grid2$V2,
z = 0,
color = ~prd,
opacity=0.03,
showlegend = FALSE
)
plot1
library(shiny); runApp('app3.R')
