knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(".\\data\\cirrhosis.csv",sep = ",",header = T)
head(df)
str(df)
dim(df)
df <- na.omit(df)
dim(df)
df
df<- df[,-c(1:2,4:10,21)]
df
library(dplyr)
df |> select(is.numeric())
df |> select(is.numeric
df |> select(is.numeric)
df |> select(is.numeric)
df |> select(is.numeric) -> df
df <- df[,-10]
df
library(klaR)
library(MLmetrics)
rda_out <- rda(Status~.,df)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(".\\data\\cirrhosis.csv",sep = ",",header = T)
head(df)
str(df)
dim(df)
df <- na.omit(df)
dim(df)
library(dplyr)
stat <- df$Status
df |> select(is.numeric) -> df
df <- cbind(stat,df[,-10])
# for (i in 1:ncol(df)) {
#   if(typeof(df[,i])=="character"){
#     df[,i] <- factor(df[,i])
#   }
# }
# df$Stage <- factor(df$Stage)
df
library(klaR)
library(MLmetrics)
rda_out <- rda(Status~.,df)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(".\\data\\cirrhosis.csv",sep = ",",header = T)
head(df)
str(df)
dim(df)
df <- na.omit(df)
dim(df)
library(dplyr)
Status <- df$Status
df |> select(is.numeric) -> df
df <- cbind(Status,df[,-10])
# for (i in 1:ncol(df)) {
#   if(typeof(df[,i])=="character"){
#     df[,i] <- factor(df[,i])
#   }
# }
# df$Stage <- factor(df$Stage)
library(klaR)
library(MLmetrics)
rda_out <- rda(Status~.,df)
ConfusionMatrix(predict(rda_out)$class, df$Status)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(df$Status)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(".\\data\\cirrhosis.csv",sep = ",",header = T)
head(df)
str(df)
dim(df)
df <- na.omit(df)
dim(df)
library(dplyr)
Status <- df$Status
df |> select(is.numeric) -> df
df <- cbind(Status,df[,-10])
# for (i in 1:ncol(df)) {
#   if(typeof(df[,i])=="character"){
#     df[,i] <- factor(df[,i])
#   }
# }
# df$Stage <- factor(df$Stage)
df
rda_out <- rda(Status~.,df)
ConfusionMatrix(predict(rda_out)$class, df$Status)
library(klaR)
library(MLmetrics)
rda_out <- rda(Status~.,df)
ConfusionMatrix(predict(rda_out)$class, df$Status)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(df$Status)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
Precision(y_true, y_pred)
y_true
df$Status
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(".\\data\\cirrhosis.csv",sep = ",",header = T)
head(df)
str(df)
dim(df)
df <- na.omit(df)
dim(df)
library(dplyr)
Status <- df$Status
df |> select(is.numeric) -> df
df <- cbind(factor(Status),df[,-10])
# for (i in 1:ncol(df)) {
#   if(typeof(df[,i])=="character"){
#     df[,i] <- factor(df[,i])
#   }
# }
# df$Stage <- factor(df$Stage)
library(klaR)
library(MLmetrics)
rda_out <- rda(Status~.,df)
library(klaR)
library(MLmetrics)
rda_out <- rda(Status~.,df)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(".\\data\\cirrhosis.csv",sep = ",",header = T)
head(df)
str(df)
dim(df)
df <- na.omit(df)
dim(df)
library(dplyr)
Status <- factor(df$Status)
df |> select(is.numeric) -> df
df <- cbind(Status,df[,-10])
# for (i in 1:ncol(df)) {
#   if(typeof(df[,i])=="character"){
#     df[,i] <- factor(df[,i])
#   }
# }
# df$Stage <- factor(df$Stage)
library(klaR)
library(MLmetrics)
rda_out <- rda(Status~.,df)
ConfusionMatrix(predict(rda_out)$class, df$Status)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(df$Status)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
res
factanal(df, factors = 3)
factanal(df[,-1], factors = 3)
factanal(df[,-1], factors = 2,rotation="Varimax")
factanal(df[,-1], factors = 2,rotation="varimax")
factanal(df[,-1], factors = 2,rotation="quartimax")
factanal(df[,-1], factors = 2,rotation="quartimax")
?factanal
factanal(df[,-1], factors = 2,rotation = "quartimax")
factanal(df[,-1], factors = 2,rotation = "varimax")
factanal(df[,-1], factors = 4,rotation = "varimax")
factanal(df[,-1], factors = 7,rotation = "varimax")
factanal(df[,-1], factors = 4,rotation = "varimax")
factanal(df[,-1], factors = 4,rotation = "varimax")
factanal(df[,-1], factors = 5,rotation = "varimax")
factanal(df[,-1], factors = 6,rotation = "varimax")
factanal(df[,-1], factors = 2,rotation = "varimax")
pca(df[,-1],2)
prcomp(df[,-1])
pca.out <- prcomp(df[,-1])
summary(pca.out)
pca.out$rotation[,1:2]
round(pca.out$rotation[,1:2],2)
round(pca.out$rotation[,1:2],4)
loadi <- round(pca.out$rotation[,1:2],4)
loadi[abs(loadi)<0.2] <- NA
loadi
loadi <- round(pca.out$rotation[,1:2],4)
loadi[abs(loadi)<0.1] <- NA
loadi
loadi <- round(pca.out$rotation[,1:2],4)
loadi[abs(loadi)<0.01] <- NA
loadi
loadi <- round(pca.out$rotation[,1:2],4)
loadi[abs(loadi)<0.005] <- NA
loadi
df
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(".\\data\\cirrhosis.csv",sep = ",",header = T)
head(df)
str(df)
dim(df)
df <- na.omit(df)
dim(df)
Status <- factor(df$Status)
df |> select(is.numeric) -> df
df
df <- cbind(Status,df[,c(-1,-10)])
df
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(".\\data\\cirrhosis.csv",sep = ",",header = T)
head(df)
str(df)
dim(df)
df <- na.omit(df)
dim(df)
library(dplyr)
Status <- factor(df$Status)
df |> select(is.numeric) -> df
df <- cbind(Status,df[,c(-1,-10)])
# for (i in 1:ncol(df)) {
#   if(typeof(df[,i])=="character"){
#     df[,i] <- factor(df[,i])
#   }
# }
# df$Stage <- factor(df$Stage)
library(klaR)
library(MLmetrics)
rda_out <- rda(Status~.,df)
ConfusionMatrix(predict(rda_out)$class, df$Status)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(df$Status)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
res
factanal(df[,-1], factors = 2,rotation = "varimax") #TODo ask jeff if its bad to keep only 2 factors if we reject the null
pca.out <- prcomp(df[,-1])
summary(pca.out)
loadi <- round(pca.out$rotation[,1:2],4)
loadi[abs(loadi)<0.005] <- NA
loadi
library(dplyr)
Status <- factor(df$Status)
df |> select(is.numeric) -> df
df <- cbind(Status,df[,c(-1,-10)])
# for (i in 1:ncol(df)) {
#   if(typeof(df[,i])=="character"){
#     df[,i] <- factor(df[,i])
#   }
# }
# df$Stage <- factor(df$Stage)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(".\\data\\cirrhosis.csv",sep = ",",header = T)
head(df)
str(df)
dim(df)
df <- na.omit(df)
dim(df)
library(dplyr)
Status <- factor(df$Status)
df |> select(is.numeric) -> df
df <- cbind(Status,df[,c(-1,-10)])
# for (i in 1:ncol(df)) {
#   if(typeof(df[,i])=="character"){
#     df[,i] <- factor(df[,i])
#   }
# }
# df$Stage <- factor(df$Stage)
df
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(".\\data\\cirrhosis.csv",sep = ",",header = T)
head(df)
str(df)
dim(df)
df <- na.omit(df)
dim(df)
library(dplyr)
Status <- factor(df$Status)
df |> select(is.numeric) -> df
df <- cbind(Status,df[,c(-1,-9)])
# for (i in 1:ncol(df)) {
#   if(typeof(df[,i])=="character"){
#     df[,i] <- factor(df[,i])
#   }
# }
# df$Stage <- factor(df$Stage)
df
library(dplyr)
Status <- factor(df$Status)
df |> select(is.numeric) -> df
df <- cbind(Status,df)
# for (i in 1:ncol(df)) {
#   if(typeof(df[,i])=="character"){
#     df[,i] <- factor(df[,i])
#   }
# }
# df$Stage <- factor(df$Stage)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(".\\data\\cirrhosis.csv",sep = ",",header = T)
head(df)
str(df)
dim(df)
df <- na.omit(df)
dim(df)
library(dplyr)
Status <- factor(df$Status)
df |> select(is.numeric) -> df
df <- cbind(Status,df)
# for (i in 1:ncol(df)) {
#   if(typeof(df[,i])=="character"){
#     df[,i] <- factor(df[,i])
#   }
# }
# df$Stage <- factor(df$Stage)
df
df[,-"Stage"]
ncol(df)
df <- df[,-14]
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(".\\data\\cirrhosis.csv",sep = ",",header = T)
head(df)
str(df)
dim(df)
df <- na.omit(df)
dim(df)
library(dplyr)
Status <- factor(df$Status)
df |> select(is.numeric) -> df
df <- cbind(Status,df)
df <- df[,-14]
# for (i in 1:ncol(df)) {
#   if(typeof(df[,i])=="character"){
#     df[,i] <- factor(df[,i])
#   }
# }
# df$Stage <- factor(df$Stage)
df
library(dplyr)
Status <- factor(df$Status)
df |> select(is.numeric) -> df
df <- cbind(Status,df[,c(-1,-14)])
# for (i in 1:ncol(df)) {
#   if(typeof(df[,i])=="character"){
#     df[,i] <- factor(df[,i])
#   }
# }
# df$Stage <- factor(df$Stage)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(".\\data\\cirrhosis.csv",sep = ",",header = T)
head(df)
str(df)
dim(df)
df <- na.omit(df)
dim(df)
library(dplyr)
Status <- factor(df$Status)
df |> select(is.numeric) -> df
df <- cbind(Status,df[,c(-1,-14)])
# for (i in 1:ncol(df)) {
#   if(typeof(df[,i])=="character"){
#     df[,i] <- factor(df[,i])
#   }
# }
# df$Stage <- factor(df$Stage)
df
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(".\\data\\cirrhosis.csv",sep = ",",header = T)
head(df)
str(df)
dim(df)
df <- na.omit(df)
dim(df)
library(dplyr)
Status <- factor(df$Status)
df |> select(is.numeric) -> df
df <- cbind(Status,df)
# for (i in 1:ncol(df)) {
#   if(typeof(df[,i])=="character"){
#     df[,i] <- factor(df[,i])
#   }
# }
# df$Stage <- factor(df$Stage)
df
df[,-2]
df <- df[,-2]
df
df <- df[,-13]
df
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(".\\data\\cirrhosis.csv",sep = ",",header = T)
head(df)
str(df)
dim(df)
df <- na.omit(df)
dim(df)
library(dplyr)
Status <- factor(df$Status)
df |> select(is.numeric) -> df
df <- cbind(Status,df)
df <- df[,-2]
df <- df[,-13]
# for (i in 1:ncol(df)) {
#   if(typeof(df[,i])=="character"){
#     df[,i] <- factor(df[,i])
#   }
# }
# df$Stage <- factor(df$Stage)
library(klaR)
library(MLmetrics)
rda_out <- rda(Status~.,df)
ConfusionMatrix(predict(rda_out)$class, df$Status)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(df$Status)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
res
factanal(df[,-1], factors = 2,rotation = "varimax") #TODo ask jeff if its bad to keep only 2 factors if we reject the null
pca.out <- prcomp(df[,-1])
summary(pca.out)
loadi <- round(pca.out$rotation[,1:2],4)
loadi[abs(loadi)<0.005] <- NA
loadi
loadi <- round(pca.out$rotation[,1:2],4)
loadi[abs(loadi)<0.001] <- NA
loadi
loadi <- round(pca.out$rotation[,1:2],4)
# loadi[abs(loadi)<0.001] <- NA
loadi
boundary(rda_out, x, class = "Status", main = "LDA")
# input:
# model: classification model
# data: training set
# class: response variable
boundary <- function(model, data, class = NULL, predict_type = "class",
resolution = 100, showgrid = TRUE, ...) {
if(!is.null(class)) cl <- data[,class] else cl <- 1
data <- data[,1:2]
k <- length(unique(cl))
plot(data, col = as.integer(cl)+1L, pch = as.integer(cl)+1L, ...)
# make grid
r <- sapply(data, range, na.rm = TRUE)
xs <- seq(r[1,1], r[2,1], length.out = resolution)
ys <- seq(r[1,2], r[2,2], length.out = resolution)
g <- cbind(rep(xs, each=resolution), rep(ys, time = resolution))
colnames(g) <- colnames(r)
g <- as.data.frame(g)
### guess how to get class labels from predict
### (unfortunately not very consistent between models)
p <- predict(model, g, type = predict_type)
if(is.list(p)) p <- p$class
p <- as.factor(p)
if(showgrid) points(g, col = as.integer(p)+1L, pch = ".")
z <- matrix(as.integer(p), nrow = resolution, byrow = TRUE)
contour(xs, ys, z, add = TRUE, drawlabels = FALSE,
lwd = 2, levels = (1:(k-1))+.5)
invisible(z)
}
boundary(rda_out, x, class = "Status", main = "LDA")
# input:
# model: classification model
# data: training set
# class: response variable
boundary <- function(model, data, class = NULL, predict_type = "class",
resolution = 100, showgrid = TRUE, ...) {
if(!is.null(class)) cl <- data[,class] else cl <- 1
data <- data[,1:2]
k <- length(unique(cl))
plot(data, col = as.integer(cl)+1L, pch = as.integer(cl)+1L, ...)
# make grid
r <- sapply(data, range, na.rm = TRUE)
xs <- seq(r[1,1], r[2,1], length.out = resolution)
ys <- seq(r[1,2], r[2,2], length.out = resolution)
g <- cbind(rep(xs, each=resolution), rep(ys, time = resolution))
colnames(g) <- colnames(r)
g <- as.data.frame(g)
### guess how to get class labels from predict
### (unfortunately not very consistent between models)
p <- predict(model, g, type = predict_type)
if(is.list(p)) p <- p$class
p <- as.factor(p)
if(showgrid) points(g, col = as.integer(p)+1L, pch = ".")
z <- matrix(as.integer(p), nrow = resolution, byrow = TRUE)
contour(xs, ys, z, add = TRUE, drawlabels = FALSE,
lwd = 2, levels = (1:(k-1))+.5)
invisible(z)
}
boundary(rda_out, df, class = "Status", main = "LDA")
boundary(rda_out, data.frame(df$Cholesterol,df$Copper), class = "Status", main = "LDA")
data.frame(df$Cholesterol,df$Copper)
boundary(rda_out, data.frame(df$Cholesterol,df$Copper), class = "Status", main = "LDA")
boundary(rda_out, data.frame(df$Cholesterol,df$Copper,"Status"=df$Status), class = "Status", main = "LDA")
