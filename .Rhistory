"INSECTI_M")]
census <- inner_join(bees,pests,by="CCSUID")
census <- census%>%
filter_all(all_vars(. >= 1))
census
census$BEEHON_N <- cut(census$BEEHON_N,5)
rda(BEEHON_N~.,census)
library(readxl)
library(tidyverse)
library(klaR)
bees <- read_excel("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\bees.xlsx")[,c("CCSUID","BEEHON_N")]
pests <- read_excel("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\pests.xlsx")[,c("CCSUID",
"FUNGIC_M",
"HERBCI_M",
"INSECTI_M")]
census <- inner_join(bees,pests,by="CCSUID")
census <- census%>%
filter_all(all_vars(. >= 10))
census$BEEHON_N <- cut(census$BEEHON_N,5)
rda(BEEHON_N~.,census)
library(readxl)
library(tidyverse)
library(klaR)
bees <- read_excel("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\bees.xlsx")[,c("CCSUID","BEEHON_N")]
pests <- read_excel("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\pests.xlsx")[,c("CCSUID",
"FUNGIC_M",
"HERBCI_M",
"INSECTI_M")]
census <- inner_join(bees,pests,by="CCSUID")
census <- census%>%
filter_all(all_vars(. >= 10))
census$BEEHON_N <- cut(census$BEEHON_N,2)
rda(BEEHON_N~.,census)
library(readxl)
library(tidyverse)
library(klaR)
bees <- read_excel("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\bees.xlsx")[,c("CCSUID","BEEHON_N")]
pests <- read_excel("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\pests.xlsx")[,c("CCSUID",
"FUNGIC_M",
"HERBCI_M",
"INSECTI_M")]
census <- inner_join(bees,pests,by="CCSUID")
census <- census%>%
filter_all(all_vars(. >= 10))
census$BEEHON_N <- cut(census$BEEHON_N,2)
rda_out <- rda(BEEHON_N~.,census)
ConfusionMatrix(predict(rda_out)$class, df$Label)
library(readxl)
library(tidyverse)
library(klaR)
bees <- read_excel("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\bees.xlsx")[,c("CCSUID","BEEHON_N")]
pests <- read_excel("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\pests.xlsx")[,c("CCSUID",
"FUNGIC_M",
"HERBCI_M",
"INSECTI_M")]
census <- inner_join(bees,pests,by="CCSUID")
census <- census%>%
filter_all(all_vars(. >= 10))
census$BEEHON_N <- cut(census$BEEHON_N,2)
rda_out <- rda(BEEHON_N~.,census)
ConfusionMatrix(predict(rda_out)$class, census$BEEHON_N)
census
census
library(readxl)
library(tidyverse)
library(klaR)
bees <- read_excel("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\bees.xlsx")[,c("CCSUID","BEEHON_N")]
pests <- read_excel("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\pests.xlsx")[,c("CCSUID",
"FUNGIC_M",
"HERBCI_M",
"INSECTI_M")]
census <- inner_join(bees,pests,by="CCSUID")
census <- census%>%
filter_all(all_vars(. >= 5))
census$BEEHON_N <- cut(census$BEEHON_N,2)
rda_out <- rda(BEEHON_N~.,census)
ConfusionMatrix(predict(rda_out)$class, census$BEEHON_N)
library(readxl)
library(tidyverse)
library(klaR)
bees <- read_excel("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\bees.xlsx")[,c("CCSUID","BEEHON_N")]
pests <- read_excel("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\pests.xlsx")[,c("CCSUID",
"FUNGIC_M",
"HERBCI_M",
"INSECTI_M")]
census <- inner_join(bees,pests,by="CCSUID")
census <- census%>%
filter_all(all_vars(. >= 0))
census$BEEHON_N <- cut(census$BEEHON_N,2)
rda_out <- rda(BEEHON_N~.,census)
ConfusionMatrix(predict(rda_out)$class, census$BEEHON_N)
library(readxl)
library(tidyverse)
library(klaR)
bees <- read_excel("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\bees.xlsx")[,c("CCSUID","BEEHON_N")]
pests <- read_excel("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\pests.xlsx")[,c("CCSUID",
"FUNGIC_M",
"HERBCI_M",
"INSECTI_M")]
census <- inner_join(bees,pests,by="CCSUID")
census <- census%>%
filter_all(all_vars(. >= 0))
census$BEEHON_N <- cut(census$BEEHON_N,3)
rda_out <- rda(BEEHON_N~.,census)
ConfusionMatrix(predict(rda_out)$class, census$BEEHON_N)
df <- read.csv("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\sonar.all-data.csv",sep = ",",header = T)
df[,ncol(df)] <- factor(df[,ncol(df)])
head(df)
library(klaR)
library(MLmetrics)
df
rda_out <- rda(Label~.,df)
ConfusionMatrix(predict(rda_out)$class, df$Label)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(df$Label)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
res
#x: the non-negative data (if any negatives exist, the whole data is shifted)
#q: the number of factors/bases
#eps: convergence criteria (lack of progress on sum squared error)
#maxit: convergence criteria (max iteration when lack of progress not met)
#w: n by q scores on factors
#h: q by p observed factors/bases
#By default (when w, h NULL) both w and h are initialized randomly
nmf <- function(x, q, eps=0.001, maxit=2000, w=NULL, h=NULL){
n <- nrow(x)
p <- ncol(x)
if(any(x<0)){x <- as.matrix(x)+abs(min(x))}
else{x <- as.matrix(x)}
if(is.null(w)){
w <- matrix(runif(n*q, min(x), max(x)), n, q)
}
if(is.null(h)){
h <- matrix(runif(p*q, min(x), max(x)), q, p)
}
ed <- sum((x-w%*%h)^2)
conv <- FALSE
ctr <- 1
while(!conv){
ctr <- ctr+1
h <- h * (t(w) %*% x) / (t(w) %*% w %*% h)
w <- w * (x %*% t(h)) / (w %*% h %*% t(h))
wh <- w%*%h
ed[ctr] <- sum((x-wh)^2)
if((ed[ctr-1]-ed[ctr] < eps)|(ctr==maxit)){
conv <- TRUE
}
}
list(ed=ed, w=w, h=h, x=x)
}
df_x <- as.matrix(df[,-ncol(df)])
df_x_nmf <- nmf(df_x,2,maxit=5000)
new_preds <- df_x_nmf$w
df_new <- cbind(df$Label,as.data.frame(new_preds))
colnames(df_new)[1] <- "label"
rda_out <- rda(label~.,df_new)
ConfusionMatrix(predict(rda_out)$class, df$Label)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(df$Label)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
res
knitr::opts_chunk$set(echo = TRUE)
bees <- read.csv("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\pokemon.csv")
pokemon <- read.csv("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\pokemon.csv")
pokemon
plot(pokemon)
dim(pokemon)
pokemon <- na.omit(pokemon)
dim(pokemon)
pokemon
pokemon <- na.omit(pokemon)
pokemon <- pokemon[,c("attack",
"defense",
"hp",
"sp_attack",
"sp_defense",
"speed",
"type1")]
plot(pokemon)
library(tidyverse)
library(klaR)
pokemon <- read.csv("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\pokemon.csv")
pokemon <- na.omit(pokemon)
pokemon <- pokemon[,c(,
"type1","attack",
"defense",
"hp",
"sp_attack",
"sp_defense",
"speed")]
pokemon <- na.omit(pokemon)
pokemon <- pokemon[,c(
"type1","attack",
"defense",
"hp",
"sp_attack",
"sp_defense",
"speed")]
plot(pokemon)
rda(type1~.,pokemon)
rda_put <- rda(type1~.,pokemon)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(pokemon$type1)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
library(MLmetrics)
rda_put <- rda(type1~.,pokemon)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(pokemon$type1)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
library(tidyverse)
library(klaR)
library(MLmetrics)
pokemon <- read.csv("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\pokemon.csv")
pokemon <- na.omit(pokemon)
pokemon <- pokemon[,c(
"type1","attack",
"defense",
"hp",
"sp_attack",
"sp_defense",
"speed")]
pokemon$type1 <- factor(pokemon$type1)
plot(pokemon)
rda_put <- rda(type1~.,pokemon)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(pokemon$type1)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
ConfusionMatrix(predict(rda_out)$class, pokemon$type1)
predict(rda_out)$class
rda_out <- rda(type1~.,pokemon)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(pokemon$type1)
ConfusionMatrix(predict(rda_out)$class, pokemon$type1)
library(tidyverse)
library(klaR)
library(MLmetrics)
pokemon <- read.csv("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\pokemon.csv")
pokemon <- na.omit(pokemon)
pokemon <- pokemon[,c(
"type1","attack",
"defense",
"hp",
"sp_attack",
"sp_defense",
"speed")]
pokemon$type1 <- factor(pokemon$type1)
plot(pokemon)
rda_out <- rda(type1~.,pokemon)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_true <- as.numeric(pokemon$type1)
ConfusionMatrix(predict(rda_out)$class, pokemon$type1)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
F1_Score(y_true, y_pred)
y_pred
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(pokemon$type1)
ConfusionMatrix(predict(rda_out)$class, pokemon$type1)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
res
?arima
pokemon <- read.csv("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\pokemon.csv") |> filter(type1%in%c("fire"))
library(tidyverse)
library(klaR)
library(MLmetrics)
pokemon <- read.csv("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\pokemon.csv") |> filter(type1%in%c("fire","water","grass"))
library(tidyverse)
library(klaR)
library(MLmetrics)
pokemon <- read.csv("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\pokemon.csv") |> filter(type1%in%c("fire","water","grass"))
pokemon <- na.omit(pokemon)
pokemon <- pokemon[,c(
"type1","attack",
"defense",
"hp",
"sp_attack",
"sp_defense",
"speed")]
pokemon$type1 <- factor(pokemon$type1)
plot(pokemon)
rda_out <- rda(type1~.,pokemon)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(pokemon$type1)
ConfusionMatrix(predict(rda_out)$class, pokemon$type1)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
res
rda_out
pca.out <- prcomp(pokemon[,-1])
summary(pca.out)
loadi <- round(pca.out$rotation[,1:2],4)
# loadi[abs(loadi)<0.001] <- NA
loadi
scores <- as.data.frame(pca.out$x)[,1:2]
df <- cbind(scores,pokemon$type1)
colnames(df)[3] <- "type1"
rda(type1~.,df)
library(tidyverse)
library(klaR)
library(MLmetrics)
bc <- read.csv("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\breast-cancer.csv")
bc
bc <- na.omit(bc)
bc
bc <- bc[,-1]
bc
bc$diagnosis <- factor(bc$diagnosis)
bc
rda_out <- rda(diagnosis~.,bc)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(bc$type1)
ConfusionMatrix(predict(rda_out)$class, bc$diagnosis)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
rda_out <- rda(diagnosis~.,bc)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(bc$diagnosis)
ConfusionMatrix(predict(rda_out)$class, bc$diagnosis)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
res
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(klaR)
library(MLmetrics)
bc <- read.csv("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\breast-cancer.csv")
bc <- na.omit(bc)
bc <- bc[,-1]
bc$diagnosis <- factor(bc$diagnosis)
bc
rda_out <- rda(diagnosis~.,bc)
# Calculate and format results
post <- predict(rda_out)$posterior
class <- predict(rda_out)$class
y_pred <- as.numeric(predict(rda_out)$class)
y_true <- as.numeric(bc$diagnosis)
ConfusionMatrix(predict(rda_out)$class, bc$diagnosis)
res <-
data.frame(
"Precision" = Precision(y_true, y_pred),
"Recall" = Recall(y_true, y_pred),
"F1_Score" = F1_Score(y_true, y_pred)
)
res
```{r}
plot(bc)
bc <- na.omit(bc)
bc <- bc[,-1]
bc$diagnosis <- factor(bc$diagnosis)
library(tidyverse)
library(klaR)
library(MLmetrics)
bc <- read.csv("C:\\Users\\danie\\Desktop\\2023 W1\\DATA 419C\\Project\\DATA_419_Project\\breast-cancer.csv")
bc <- na.omit(bc)
bc <- bc[,-1]
bc$diagnosis <- factor(bc$diagnosis)
bc
plot(bc[,-1])
bc[,-1]
pca.out <- prcomp(bc[,-1])
summary(pca.out)
loadi <- round(pca.out$rotation[,1:2],4)
# loadi[abs(loadi)<0.001] <- NA
loadi
scores <- as.data.frame(pca.out$x)[,1:2]
df <- cbind(scores,bc$diagnosis)
colnames(df)[3] <- "diagnosis"
rda(diagnosis~.,df)
?rda
factanal(bc,2)
factanal(bc[,-1],2)
bc[,-1]
factanal(bc[,-1])
factanal(bc[,-1],factors = 2)
?factanal
factanal(~., data=bc,factors = 3,
scores = "Bartlett")
factanal(~., data=bc[,-1],factors = 3,
scores = "Bartlett")
factanal(~., data=bc[,-1],factors = 5,
scores = "Bartlett")
factanal(bc[,-1],factors = 5,
scores = "Bartlett")
bc[,-1]
data <- as.matrix(bc[,-1])
factanal(data,factors = 5,
scores = "Bartlett")
factanal(data,factors = 10,
scores = "Bartlett")
factanal(data,factors = 2,
scores = "Bartlett")
factanal(data,factors = 15,
scores = "Bartlett")
factanal(data,factors = 20,
scores = "Bartlett")
#x: the non-negative data (if any negatives exist, the whole data is shifted)
#q: the number of factors/bases
#eps: convergence criteria (lack of progress on sum squared error)
#maxit: convergence criteria (max iteration when lack of progress not met)
#w: n by q scores on factors
#h: q by p observed factors/bases
#By default (when w, h NULL) both w and h are initialized randomly
nmf <- function(x, q, eps=0.001, maxit=2000, w=NULL, h=NULL){
n <- nrow(x)
p <- ncol(x)
if(any(x<0)){x <- as.matrix(x)+abs(min(x))}
else{x <- as.matrix(x)}
if(is.null(w)){
w <- matrix(runif(n*q, min(x), max(x)), n, q)
}
if(is.null(h)){
h <- matrix(runif(p*q, min(x), max(x)), q, p)
}
ed <- sum((x-w%*%h)^2)
conv <- FALSE
ctr <- 1
while(!conv){
ctr <- ctr+1
h <- h * (t(w) %*% x) / (t(w) %*% w %*% h)
w <- w * (x %*% t(h)) / (w %*% h %*% t(h))
wh <- w%*%h
ed[ctr] <- sum((x-wh)^2)
if((ed[ctr-1]-ed[ctr] < eps)|(ctr==maxit)){
conv <- TRUE
}
}
list(ed=ed, w=w, h=h, x=x)
}
nmf(bc[,-1],2)
nmf.out <- nmf(bc[,-1],2)
nmf$w
nmf.out$w
nmf.out <- nmf(bc[,-1],2)
scores <- as.data.frame(nmf.out$w)
df <- cbind(scores,bc$diagnosis)
colnames(df)[3] <- "diagnosis"
rda(diagnosis~.,df)
